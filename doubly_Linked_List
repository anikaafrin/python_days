class Node:
    def __init__(self, data):
        self.data = data
        self.nref = None
        self.pref = None
class DoublyLinkedList:
    def __init__(self):
       self.head=None
    def traverse(self):
        if self.head is None:
            print("Linked List is Empty")
        else:
            n = self.head 
            while n is not None:
                print(n.data, "-->", end=" ") 
                n=n.nref
    def reverse(self):
        if self.head is None:
            print("Linked List is Empty")
        else:
            n = self.head 
            while n.nref is not None:
                n=n.nref 
                
            while n is not None:
                print(n.data, "-->", end=" ") 
                n=n.pref
    def add_empty(self, data):
         
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print("Linked List is not empty")
            
    def add_begin(self, data ):
        
        new_node =Node(data)
        if self.head is None:
            self.head = new_node 
        else:
            new_node.nref = self.head 
            self.head.pref = new_node
            self.head = new_node 
    def add_end(self, data):
        new_node =Node(data)
        if self.head is None:
            self.head = new_node 
        else:
            n = self.head 
            while n.nref is not None:
                n=n.nref 
            n.nref = new_node 
            new_node.pref = n 
    def add_after(self, data, x):
        if self.head is None:
            print("LL is empty")
        else:
            n=self.head 
            while n.nref is not None:
                if x==n.data:
                    break 
                n=n.nref 
            if n is None:
                print("Given Node is not present in DLL")
            else: 
                new_node=Node(data)
                new_node.nref = n.nref 
                new_node.pref = n 
                if n.nref is not None:
                    n.nref.pref = new_node
                n.nref = new_node
        
        
        
    def add_before(self,data, x):
        if self.head is None:
            print("LL is empty")
        else:
            n=self.head 
            while n.nref is not None:
                if x==n.data:
                    break 
                n=n.nref 
            if n is None:
                print("Given Node is not present in DLL") 
            else: 
                new_node=Node(data)
                new_node.nref = n 
                new_node.pref = n.pref 
                if n.pref is not None:
                    n.pref.nref =new_node 
                else:
                    self.head = new_node
                n.pref = new_node
    def delete_begin(self):
        if self.head is None:
            print("DLL is empty so can't delete ")
            return 
        if self.head.nref is None:
            self.head = None 
            print("DLL is empty after deleting the node") 
        else: 
            self.head = self.head.nref 
            self.head.pref = None  
    def delete_end(self):
        if self.head is None:
            print("DLL is empty so can't delete ")
            return   
        if self.head.nref is None: 
            self.head=None
            print("DLL is empty after deleting the node") 
        else: 
            n= self.head 
            while n.nref is not None: 
                n=n.nref 
            n.pref.nref = None 
    def delete_by_value(self, x):
        if self.head is None:
            print("DLL is empty so can't delete ")
            return  
        if self.head.nref is none:
            if self.head.data == x:
                self.head = None
                print("DLL is empty after deleting the node") 
            else:
                print("X is not present in dll") 
            return 
        if self.head.data == x:
            self.head = self.head.nref 
            self.head.pref = None 
            return 
        n = self.head 
        while n.nref is not None:
            if x==n.data:
                break 
            n = n.nref  
        if n.nref is not None:
            n.nref.pref = n.pref 
            n.pref.nref = n.nref 
        else: 
            if n.data == x:
                n.pref.nref = None 
            else:
                print("x is not present in dll")
            
        
        
        
        
        
doubly= DoublyLinkedList() 
doubly.add_begin(10)
doubly.add_end(100)
doubly.add_before(100, 10)
doubly.add_after(40, 100)
doubly.traverse()
#doubly.reverse()



